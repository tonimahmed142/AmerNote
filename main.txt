import pandas as pd
from BinaryOptionsTools import pocketoption
from sklearn.preprocessing import StandardScaler
import torch
import torch.nn as nn
import torch.optim as optim
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import MACD, SMAIndicator, EMAIndicator, PSARIndicator, CCIIndicator
from ta.volatility import AverageTrueRange, BollingerBands

import time

total_trades = 0

# Define a basic neural network
class BinaryOptionsModel(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(BinaryOptionsModel, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.relu2 = nn.ReLU()
        self.fc3 = nn.Linear(hidden_size, output_size)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.fc1(x)
        x = self.relu(x)
        x = self.fc2(x)
        x = self.relu2(x)
        x = self.fc3(x)
        x = self.sigmoid(x)
        return x

# Load the session and connect to the PocketOption API
ssid = (r'42["auth",{"session":"ofgchta13rcbmf7r5nlj9n0gfg","isDemo":1,"uid":70748979,"platform":2}]')

api = pocketoption(ssid, True)

# Get current balance
print(f"GET BALANCE: {api.GetBalance()}")

# Define market symbols
symbols = ["AUDNZD_otc", "EURUSD_otc", "AUDCAD_otc", "AEDCNY_otc", "AUDUSD_otc", "CADCHF_otc", "AUDCHF_otc", "BHDCNY_otc"]  # Add more symbols as needed

def preprocess_data(df):
    data = df.copy()

    # Calculate RSI ==========(1)
    rsi_period = 14
    data['rsi'] = RSIIndicator(close=data['close'], window=rsi_period).rsi()

    # Calculate MACD ==========(2)
    macd_fast = 12  # Fast period
    macd_slow = 26  # Slow period
    macd_signal = 9  # Signal period
    macd = MACD(
        close=data['close'],
        window_fast=macd_fast,
        window_slow=macd_slow,
        window_sign=macd_signal
    )
    data['macd'] = macd.macd()
    data['macd_signal'] = macd.macd_signal()

    # Calculate Moving Averages ==========(3)
    sma_period = 5
    ema_period = 8
    data['sma'] = SMAIndicator(close=data['close'], window=sma_period).sma_indicator()
    data['ema'] = EMAIndicator(close=data['close'], window=ema_period).ema_indicator()

    # Calculate Stochastic Oscillator ==========(4)
    stoch = StochasticOscillator(
        high=data['high'],
        low=data['low'],
        close=data['close'],
        window=13,  # %K period
        smooth_window=2  # %D period
    )
    data['stoch_k'] = stoch.stoch()
    data['stoch_d'] = stoch.stoch_signal()

    # Calculate Average True Range ==========(5)
    atr = AverageTrueRange(high=data['high'], low=data['low'], close=data['close'])
    data['atr'] = atr.average_true_range()

    # Bollinger Bands ============(6)
    bollinger = BollingerBands(close=data['close'], window=20, window_dev=2)
    data['bb_high'] = bollinger.bollinger_hband()
    data['bb_low'] = bollinger.bollinger_lband()
    data['bb_mid'] = bollinger.bollinger_mavg()

    # Parabolic SAR ===========(7)
    psar = PSARIndicator(high=data['high'], low=data['low'], close=data['close'], step=0.02, max_step=0.2)
    data['psar'] = psar.psar()

    # CCI ===========(8)
    cci = CCIIndicator(high=data['high'], low=data['low'], close=data['close'], window=20)
    data['cci'] = cci.cci()

    # Alligator indicator  ===========(9)
    data['alligator_jaw'] = EMAIndicator(close=data['close'], window=13).ema_indicator().shift(8)
    data['alligator_teeth'] = EMAIndicator(close=data['close'], window=8).ema_indicator().shift(5)
    data['alligator_lips'] = EMAIndicator(close=data['close'], window=5).ema_indicator().shift(3)

    # Drop any NaN values generated by the indicators
    data.dropna(inplace=True)

    return data


# ... (previous code remains the same)
while True:
    try:
        for symbol in symbols:
            # Fetch candle data for the symbol
            df = api.GetCandles(symbol, 1, count=420)
            print(f"Fetched data for {symbol}:")
            print(df)

            # Preprocess the fetched data
            data = preprocess_data(df)

            # Get the latest values
            latest = data.iloc[-1]
            rsi = latest['rsi']
            macd = latest['macd']
            macd_signal = latest['macd_signal']
            sma = latest['sma']
            ema = latest['ema']
            stoch_k = latest['stoch_k']
            stoch_d = latest['stoch_d']
            atr = latest['atr']
            bb_high = latest['bb_high']
            bb_low = latest['bb_low']
            bb_mid = latest['bb_mid']
            psar = latest['psar']
            cci = latest['cci']
            alligator_jaw = latest['alligator_jaw']
            alligator_teeth = latest['alligator_teeth']
            alligator_lips = latest['alligator_lips']

            close = latest['close']

            # Check conditions for CALL
            call_conditions = [
                rsi < 30,  # RSI oversold condition
                macd > macd_signal,  # MACD above signal line
                sma < ema,  # Short-term average below long-term average
                stoch_k < 20,  # Stochastic oversold condition
                stoch_k < stoch_d,  # Stochastic %K below %D
                atr > data['atr'].mean(),  # Volatility is above average
                close < bb_low,  # Price below lower Bollinger Band
                close > psar,  # Price above Parabolic SAR
                cci < -100,  # CCI oversold condition
                alligator_lips > alligator_teeth > alligator_jaw  # Alligator mouth open upwards
            ]

            # Check conditions for PUT
            put_conditions = [
                rsi > 70,  # RSI overbought condition
                macd < macd_signal,  # MACD below signal line
                sma > ema,  # Short-term average above long-term average
                stoch_k > 80,  # Stochastic overbought condition
                stoch_k > stoch_d,  # Stochastic %K above %D
                atr > data['atr'].mean(),  # Volatility is above average
                close > bb_high,  # Price above upper Bollinger Band
                close < psar,  # Price below Parabolic SAR
                cci > 100,  # CCI overbought condition
                alligator_lips < alligator_teeth < alligator_jaw  # Alligator mouth open downwards
            ]

            # Count how many conditions are met
            call_count = sum(call_conditions)
            put_count = sum(put_conditions)

            # Place trades if at least seven conditions are met
            if call_count >= 6:
                print(f"Placing a 'call' trade for {symbol}. Conditions met: {call_count}")
                api.Call(100, symbol, 60)
                total_trades += 1
                time.sleep(10)  # Sleep for 10 seconds after placing a trade

            elif put_count >= 6:
                print(f"Placing a 'put' trade for {symbol}. Conditions met: {put_count}")
                api.Put(100, symbol, 60)
                total_trades += 1
                time.sleep(10)  # Sleep for 10 seconds after placing a trade

            else:
                print(f"No trade placed for {symbol}. Call conditions: {call_count}, Put conditions: {put_count}")

            # Print the current indicator values for debugging
            print(f"Current RSI: {rsi:.2f}")
            print(f"Current MACD: {macd:.6f}, Signal: {macd_signal:.6f}")
            print(f"Current SMA: {sma:.6f}, EMA: {ema:.6f}")
            print(f"Current Stochastic K: {stoch_k:.2f}, D: {stoch_d:.2f}")
            print(f"Current ATR: {atr:.6f}")
            print(f"Current Bollinger Bands - High: {bb_high:.6f}, Mid: {bb_mid:.6f}, Low: {bb_low:.6f}")
            print(f"Current Parabolic SAR: {psar:.6f}")
            print(f"Current CCI: {cci:.2f}")
            print(f"Current Alligator - Jaw: {alligator_jaw:.6f}, Teeth: {alligator_teeth:.6f}, Lips: {alligator_lips:.6f}")

            # Update the total trades counter
            if total_trades >= 100:
                print(f"Total trades reached: {total_trades}. Stopping the script.")
                raise KeyboardInterrupt

    except KeyboardInterrupt:
        break

print(f"Script finished. Total trades executed: {total_trades}")
