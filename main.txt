import pandas as pd
from BinaryOptionsTools import pocketoption
from sklearn.preprocessing import StandardScaler
import torch
import torch.nn as nn
import torch.optim as optim
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import MACD, SMAIndicator, EMAIndicator
from ta.volatility import AverageTrueRange
import time

# Define a basic neural network
class BinaryOptionsModel(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(BinaryOptionsModel, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.relu2 = nn.ReLU()
        self.fc3 = nn.Linear(hidden_size, output_size)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.fc1(x)
        x = self.relu(x)
        x = self.fc2(x)
        x = self.relu2(x)
        x = self.fc3(x)
        x = self.sigmoid(x)
        return x

# Load the session and connect to the PocketOption API
ssid = (r'42["auth",{"session":"ofgchta13rcbmf7r5nlj9n0gfg","isDemo":1,"uid":70748979,"platform":2}]')

api = pocketoption(ssid, True)

# Get current balance
print(f"GET BALANCE: {api.GetBalance()}")

# Define market symbols
symbols = ["AUDNZD_otc", "EURUSD_otc", "AUDCAD_otc", "AEDCNY_otc", "AUDUSD_otc", "CADCHF_otc", "AUDCHF_otc", "BHDCNY_otc"]  # Add more symbols as needed

def preprocess_data(df):
    data = df.copy()
    # Calculate RSI
    rsi_period = 14
    data['rsi'] = RSIIndicator(close=data['close'], window=rsi_period).rsi()

    # Calculate MACD
    macd_fast = 12  # Fast period
    macd_slow = 26  # Slow period
    macd_signal = 9  # Signal period
    macd = MACD(
        close=data['close'],
        window_fast=macd_fast,
        window_slow=macd_slow,
        window_sign=macd_signal
    )
    data['macd'] = macd.macd()
    data['macd_signal'] = macd.macd_signal()


    # Calculate Moving Averages
    sma_period = 5
    ema_period = 8
    data['sma'] = SMAIndicator(close=data['close'], window=sma_period).sma_indicator()
    data['ema'] = EMAIndicator(close=data['close'], window=ema_period).ema_indicator()

    # Calculate Stochastic Oscillator
    stoch = StochasticOscillator(
        high=data['high'],
        low=data['low'],
        close=data['close'],
        window=13,  # %K period
        smooth_window=2  # %D period
    )
    data['stoch_k'] = stoch.stoch()
    data['stoch_d'] = stoch.stoch_signal()


    # Calculate Average True Range
    atr = AverageTrueRange(high=data['high'], low=data['low'], close=data['close'])
    data['atr'] = atr.average_true_range()
    # Drop any NaN values generated by the indicators
    data.dropna(inplace=True)

    return data

while True:
    try:
        for symbol in symbols:
            # Fetch candle data for the symbol
            df = api.GetCandles(symbol, 1, count=420)
            print(f"Fetched data for {symbol}:")
            print(df)

            # Preprocess the fetched data
            data = preprocess_data(df)

            # Get the latest values
            latest = data.iloc[-1]
            rsi = latest['rsi']
            macd = latest['macd']
            macd_signal = latest['macd_signal']
            sma = latest['sma']
            ema = latest['ema']
            stoch_k = latest['stoch_k']
            stoch_d = latest['stoch_d']
            atr = latest['atr']

            # Check conditions for CALL
            call_conditions = [
                sma < ema,
                stoch_k < 5,
                stoch_k < stoch_d
            ]

            # Check conditions for PUT
            put_conditions = [
                sma > ema,
                stoch_k > 95,
                stoch_k > stoch_d
            ]

            # Place trades if at least three conditions are met
            if call_conditions:
                print(f"Placing a 'call' trade for {symbol}.")
                api.Call(100, symbol, 60)
                time.sleep(60)  # Sleep for 15 seconds after placing a trade

            elif put_conditions:
                print(f"Placing a 'put' trade for {symbol}.")
                api.Put(100, symbol, 60)
                time.sleep(60)  # Sleep for 15 seconds after placing a trade

            else:
                print(f"No trade placed for {symbol}. Fewer than 3 conditions met.")

            # Print the current indicator values for debugging
            print(f"Current RSI: {rsi:.2f}")
            print(f"Current MACD: {macd:.6f}, Signal: {macd_signal:.6f}")
            print(f"Current SMA: {sma:.6f}, EMA: {ema:.6f}")
            print(f"Current Stochastic K: {stoch_k:.2f}, D: {stoch_d:.2f}")
            print(f"Current ATR: {atr:.6f}")

    except KeyboardInterrupt:
        break
